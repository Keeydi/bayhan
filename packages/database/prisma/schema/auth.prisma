model User {
  id                       String                       @id
  name                     String
  email                    String                       @unique
  emailVerified            Boolean                      @default(false)
  image                    String?
  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @default(now()) @updatedAt
  role                     String?
  banned                   Boolean?                     @default(false)
  banReason                String?
  banExpires               DateTime?
  accounts                 Account[]
  sessions                 Session[]
  address                  Address?
  attendanceRecords        Attendance[]
  certifications           Certification[]
  deployments              IncidentDeployment[]
  reportedIncidents        Incident[]
  locationLogs             LocationLog[]
  uploadedMedias           Media[]
  profile                  Profile?
  trainingParticipations   TrainingProgramParticipant[]
  updatedVolunteerRequests VolunteerRequest[]           @relation("VolunteerRequestUpdater")
  requests                 VolunteerRequest[]

  @@map("user")
  @@schema("auth")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
  @@schema("auth")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
  @@schema("auth")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
  @@schema("auth")
}
